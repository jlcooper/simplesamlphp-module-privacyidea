privacyidea module
==================

This module provides an authentication module for simpleSAMLphp to talk
to the privacyIDEA authentication server.

`privacyidea:privacyidea`
: Authenticate a user against a privacyidea server.

The module contacts the privacyIDEA server via the API

  https://privacyidea/validate/samlcheck
 
and authenticates the user according to the token assigned to the user.

The response can also contain some attributes.

To enable this module, create a file 'enable' in the
directorpy 'modules/privacyidea/'.


You can use this plugin in two different ways
Method 1) authenticate against privacyIDEA only
Method 2) authenticate the 1st factor against your authsource and the 2nd factor against privacyIDEA



Method 1
========


You need to add the authentication source 'privacyidea:privacyidea' to
'config/authsources.php'. Do it like this:

    'example-privacyidea' => array(
        'privacyidea:privacyidea',

        /* 
         * The URI (including protocol and port) of the privacyidea server
         * Required.
         */
        'privacyideaserver' => 'https://your.server.com',

        /*
         * Check if the hostname matches the name in the certificate
         * Optional.
         */
        'sslverifyhost' => False,

        /*
         * Check if the certificate is valid, signed by a trusted CA
         * Optional.
         */
        'sslverifypeer' => False,
        
        /*
         * The realm where the user is located in.
         * Optional.
         */
        'realm' => '',

        /*
         * OTP Extra
         * 0: (default) one password field for PIN and OTP
         * 1: Password field for password and extra field for OTP
         */
        'otpextra' => 1,
        
        /*
         * This is the translation from privacyIDEA attribute names to 
         * SAML attribute names.
         * Optional.
         */
         'attributemap' => array(
         			 'username' => 'samlLoginName',
         			 'surname' => 'surName',
         			 'givenname' => 'givenName',
         			 'email' => 'emailAddress',
         			 'phone' => 'telePhone',
         			 'mobile' => 'mobilePhone'
         			 ),

        /*
         * You are able to concatenate attributes like the given and surname.
         * Optional.
         */
         'concatenationmap' => array(
         			'givenname,surname' => 'fullName',
         			),

         /*
          * Here the detail attributes can be edited.
          * If they should not be listed, just remove them.
          * Optional.
          */
          'detailmap' => array(
          			 'message' => 'message',
          			 'type' => 'otpType',
          			 'serial' => 'otpSerial',
          			 'otplen' => 'otpLength'
          			 ),
    ),


User attributes
---------------
At the moment privacyIDEA will know and return the following attributes by default, 
that can be mapped to SAML attributes:

username:	The login name
surname:	The real world name of the user as it is retrieved from the user source
givenname:	The real world name of the user as it is retrieved from the user source
mobile:		The mobile phone number of the user as it is retrieved from the user source
phone:		The phone number of the user as it is retrieved from the user source
email:		The email address of the user as it is retrieved from the user source                                
                                
The list can be extended by including custom attributes in the attributemap. If the 
privacyIDEA server returns an attribute 'groups', you can map that to 'groups' if
you include it in the attributemap. Otherwise, it is discarded.




Method 2
========


If you want to use privacyIDEA as an auth proc filter, you have to change the config.php file.
Use the following example:

'authproc.idp' => array(

  // The number indicates the priority
  25 => array(

  // You must not change the class name
    'class'             => 'privacyidea:privacyidea',

  // This is the URL to your privacyidea server
    'privacyideaserver' => 'https://privacyidea.local',

  // Enter the realm, where your users are stored
    'realm'             => 'test',

  // The uidKey is the username's attribute key
    'uidKey'            => 'uid',

  // To verify host, enter true. Do not enter false in productive environments.
    'sslverifyhost'     => true,

  // To verify peer, enter true. Do not enter false in productive environments.
    'sslverifypeer'     => true,

  // If you want to pass users without a token, you can enable 'loginWithoutToken'.
  // The user has to be listed in privacyIDEA and the policy 'passOnNoToken' must be activated.
  // Optional. By default this is set to false
    'loginWithoutToken' => true
    
    ),
),
